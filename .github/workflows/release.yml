# Thanks to https://github.com/NiklasEi/bevy_game_template/blob/main/.github/workflows/release.yaml for much of this code
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'V*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version - in the form of v1.2.3'
        required: true
        type: string

env:
  EXECUTABLE_NAME: "arrata_character_sheet_manager"

permissions: write-all

name: Create release
jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - uses: cargo-bins/cargo-binstall@v1.5.0
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose --latest
        env:
          OUTPUT: CHANGELOG.md
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body_path: ${{ steps.git-cliff.outputs.changelog }}
          draft: false
          prerelease: false

  build-linux:
    runs-on: ubuntu-latest
    needs: [get-version, create-release]
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build release
        run: cargo build --release
      - name: Prepare release
        run: |
          strip target/release/${{ env.EXECUTABLE_NAME }}
          chmod +x target/release/${{ env.EXECUTABLE_NAME }}
          mv target/release/${{ env.EXECUTABLE_NAME }} .
      - name: Bundle release
        run: |
          tar -czf ${{ env.EXECUTABLE_NAME }}_linux.tar.gz ${{ env.EXECUTABLE_NAME }} public
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.EXECUTABLE_NAME }}_linux.tar.gz
          asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_linux.tar.gz
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-windows:
    runs-on: windows-latest
    needs: [get-version, create-release]
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
    - name: Setup Rust Cache
      uses: Swatinem/rust-cache@v2
    - name: Build release
      run: cargo build --release
    - name: Zip release
      uses: vimtor/action-zip@v1
      with:
        files: public target/release/${{ env.EXECUTABLE_NAME }}.exe
        dest: ${{ env.EXECUTABLE_NAME }}_windows.zip
    - name: Upload release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.EXECUTABLE_NAME }}_windows.zip
        asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
        tag: ${{ env.VERSION }}
        overwrite: true
