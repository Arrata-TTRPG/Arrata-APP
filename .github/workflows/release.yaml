# Thanks to https://github.com/NiklasEi/bevy_game_template/blob/main/.github/workflows/release.yaml for much of this code
on:
  workflow_run:
    workflows: ["Versioning"]
    types:
      - completed
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'V*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version - in the form of v1.2.3'
        required: true
        type: string

env:
  EXECUTABLE_NAME: "arrata_character_sheet_manager"
  NODE_VERSION: 20

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

name: Create release
jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
    outputs:
      version: ${{ inputs.version || steps.tag.outputs.tag }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: get-version
    env:
      VERSION: ${{needs.get-version.outputs.version}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verify version or get latest
        if: ${{ needs.get-version.outputs.version != 'v*' }}
        uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
        id: get-latest-tag
        with:
            fallback: '0.0.0'

      - name: Update version
        if: ${{ needs.get-version.outputs.version != 'v*' }}
        run: |
          echo "VERSION=${{ steps.get-latest-tag.outputs.tag }}" >> $GITHUB_ENV

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: cliff.toml
          args: --verbose --latest
        env:
          OUTPUT: CHANGELOG.md

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body_path: ${{ steps.git-cliff.outputs.changelog }}
          draft: false
          prerelease: false
    outputs:
      tag: ${{ env.VERSION }}

  build-linux:
    runs-on: ubuntu-latest
    needs: [get-version, create-release]
    env:
      VERSION: ${{ needs.create-release.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Apply Version
        run: sed -i "s/v0.0.0/${{ env.VERSION }}/g" src/lib.rs

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsoup2.4 javascriptcoregtk-4.0 -y
          sudo apt install libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev libxdo-dev -y

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Binstall Dioxus-CLI
        run: cargo binstall dioxus-cli --no-confirm

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Create CSS
        run: |
          npm install -D tailwindcss
          npx tailwindcss -i input.css -o public/tailwind.css --minify

      - name: Enabled cargo config.toml
        run: mv .cargo-disabled .cargo

      - name: Build release
        run: dx build --release --platform desktop --target x86_64-unknown-linux-gnu

      - name: Prepare release
        run: |
          strip dist/${{ env.EXECUTABLE_NAME }}
          chmod +x dist/${{ env.EXECUTABLE_NAME }}

      - name: UPX compress
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: |
            dist/${{ env.EXECUTABLE_NAME }}
          args: -fq9

      - name: Bundle release
        run: |
          cd dist
          tar -czf ../${{ env.EXECUTABLE_NAME }}_linux.tar.gz *

      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.EXECUTABLE_NAME }}_linux.tar.gz
          asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_linux.tar.gz
          release_name: ${{ env.VERSION }}
          tag: ${{ env.VERSION }}
          overwrite: true

  build-windows:
    runs-on: windows-latest
    needs: [get-version, create-release]
    env:
      VERSION: ${{ needs.create-release.outputs.tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Apply Version
      run: sed -i "s/v0.0.0/${{ env.VERSION }}/g" src/lib.rs

    - name: Install Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: nightly
        components: rust-src
        target: x86_64-pc-windows-msvc

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Binstall Dioxus-CLI
      run: cargo binstall dioxus-cli --no-confirm

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ env.NODE_VERSION }}-node_modules-${{ hashFiles('**/package-lock.json') }}

    - name: Create CSS
      run: |
        npm install -D tailwindcss
        npx tailwindcss -i input.css -o public/tailwind.css --minify

    - name: Enabled cargo config.toml
      run: mv .cargo-disabled .cargo

    - name: Build release
      run: dx build --release --platform desktop --target x86_64-pc-windows-msvc

    - name: UPX compress
      uses: crazy-max/ghaction-upx@v3
      with:
        version: latest
        files: |
          dist/${{ env.EXECUTABLE_NAME }}
        args: -fq9

    - name: Zip release
      uses: vimtor/action-zip@v1
      with:
        files: dist
        dest: ${{ env.EXECUTABLE_NAME }}_windows.zip
        recursive: true

    - name: Upload release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.EXECUTABLE_NAME }}_windows.zip
        asset_name: ${{ env.EXECUTABLE_NAME }}_${{ env.VERSION }}_windows.zip
        tag: ${{ env.VERSION }}
        overwrite: true

  build-web:
    runs-on: ubuntu-latest
    needs: [get-version, create-release]
    env:
        VERSION: ${{ needs.create-release.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Apply Version
        run: sed -i "s/v0.0.0/${{ env.VERSION }}/g" src/lib.rs

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src
          target: wasm32-unknown-unknown

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsoup2.4 javascriptcoregtk-4.0 -y
          sudo apt install libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev -y

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Binstall Dioxus-CLI
        run: cargo binstall dioxus-cli --no-confirm


      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Create CSS
        run: |
          npm install -D tailwindcss
          npx tailwindcss -i input.css -o public/tailwind.css --minify

      - name: Modify Dioxus.toml and enable cargo config.toml
        run: sed -i 's/#base_path/base_path/' Dioxus.toml

      - name: Enabled cargo config.toml
        run: mv .cargo-disabled .cargo

      - name: Create WASM with Dioxus CLI
        run: |
          dx build --release --platform web
          mv dist docs

      - name: Deploy to GH Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: web-deployment
          folder: docs
          target-folder: docs
          commit-message: "chore(cd): Deploy to GH Pages for ${{ env.VERSION }}"
