name: Versioning

on:
  pull_request:
    branches:
        - main
    types:
        - closed

env:
  version: '0.0.0'

jobs:
  version:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
        id: get-latest-tag
        with:
            fallback: '0.0.0'

      - name: Print labels
        run: |
            echo "${{ toJSON(github.event.pull_request.labels.*.name) }}"

      - name: Print version
        run: |
            echo "version=$(echo ${{ steps.get-latest-tag.outputs.tag }} | tr --delete v)" >> $GITHUB_ENV
            echo ${{ env.version }}

      - name: Determine version type
        run: |
          export major=$(echo ${{ env.version }} | cut -d '.' -f 1)
          export minor=$(echo ${{ env.version }} | cut -d '.' -f 2)
          export patch=$(echo ${{ env.version }} | cut -d '.' -f 3)

          if [ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == true ]; then
            echo "version=v$((major+1)).0.0" >> $GITHUB_ENV
          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == true ]; then
            echo "version=v${major}.$((minor+1)).0" >> $GITHUB_ENV
          elif [ "${{ contains(github.event.pull_request.labels.*.name, 'patch') }}" == true ]; then
            echo "version=v${major}.${minor}.$((patch+1))" >> $GITHUB_ENV
          else
            echo "version=v${major}.${minor}.${patch}" >> $GITHUB_ENV
          fi

      - name: Print version
        run: |
            echo ${{ steps.get-latest-tag.outputs.tag }}
            echo ${{ env.version }}

      - name: Create new tag
        run: |
          tag=${{ env.version }}
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}"
          git push origin "${tag}"